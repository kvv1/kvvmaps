/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
//  LOOKAHEAD=2;

  static = false;
}

PARSER_BEGIN(EXPR)
package kvv.exprcalc;
import java.io.*;
import kvv.stdutils.Utils;

@SuppressWarnings("unused")
public abstract class EXPR
{
  public EXPR(String text)
  {
  	this(new StringReader(text));
    //this (new JavaCCReader(fileName));
  }

  public void throwExc(String msg) throws ParseException
  {
	throw new ParseException(token, msg);
  }

  public short parse() throws ParseException, IOException
  {
    return expr(false);
  }
  
  public abstract short getValue(String name) throws ParseException;
}

PARSER_END(EXPR)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      "*"
    | ~[ "*", "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* OPERATORS */
{
  < AND : "&&" >
| < OR : "||" >
| < EQ : "==" >
| < NEQ : "!=" >
| < LT : "<" >
| < LE : "<=" >
| < GT : ">" >
| < GE : ">=" >
| < NOT : "!" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < NULL  : "null" >
| < MULDIV : "muldiv" >
}

TOKEN :
{
  < ID : [ "a"-"z", "A"-"Z", "_", "\u00A0"-"\u00FF" ] ([ "a"-"z", "A"-"Z", "_", "0"-"9", "\u00A0"-"\u00FF" ])* >
| < STRING : "\"" (~[ "\"", "\n", "\r" ])* "\"" >
| < NUMBER : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

short expr(boolean sim) :
{
  short res;}{
  res = condExpr(sim)
  {
    return res;  }
}

short condExpr(boolean sim) :
{
  short cond;  short left;
  short right;
}
{
  cond = logOrExpr(sim)
  [
    "?"  left=expr(sim || cond == 0) ":" right=condExpr(sim || cond != 0)    {
      return cond != 0 ? left : right;    }  ]
  {
    return cond;  }}
  
  
short logOrExpr(boolean sim) :
{
  short res;
  short temp;
}
{
  res = logAndExpr(sim)
  (
    < OR > temp = logAndExpr(sim || res != 0)
    {
	  	if(res == 0)
  			res = temp == 0 ? (short)0 : (short)1;
  		else
  			res = res == 0 ? (short)0 : (short)1;
    }
  )*
  {
    return res;
  }
}

short logAndExpr(boolean sim) :
{
  short res;
  short temp;
}
{
  res = boolExpr(sim)
  (
    < AND > temp = boolExpr(sim || (res == 0))
    {
	  	if(res != 0)
  			res = temp == 0 ? (short)0 : (short)1;
  		else
  			res = res == 0 ? (short)0 : (short)1;
    }
  )*
  {
    return res;
  }
}

short boolExpr(boolean sim) :
{
  int res;
  short temp;
}
{
  res = intExpr(sim)
  (
    (
      < EQ > temp = intExpr(sim)
      {
      	res = res == temp ? 1 : 0;
      }
    | < NEQ > temp = intExpr(sim)
      {
      	res = res != temp ? 1 : 0;
      }
    | < LT > temp = intExpr(sim)
      {
      	res = res < temp ? 1 : 0;
      }
    | < LE > temp = intExpr(sim)
      {
      	res = res <= temp ? 1 : 0;
      }
    | < GT > temp = intExpr(sim)
      {
      	res = res > temp ? 1 : 0;
      }
    | < GE > temp = intExpr(sim)
      {
      	res = res >= temp ? 1 : 0;
      }
    )
  )*
  {
    return (short)res;
  }
}

short intExpr(boolean sim) :
{
  int res;
  short temp;
}
{
  res = term(sim)
  (
    (
      < PLUS > temp = term(sim)
      {
        res = res + temp;
      }
    | < MINUS > temp = term(sim)
      {
        res = res - temp;
      }
    )
  )*
  {
    return (short)res;
  }
}

short term(boolean sim) :
{
  int res;
  short temp;
}
{
  res = unary(sim)
  (
    (
      < MULTIPLY > temp = unary(sim)
      {
        res = res * temp;
      }
    | < DIVIDE > temp = unary(sim)
      {
      	if(sim)
      		res = 0;
      	else
        	res = res / temp;
      }
    )
  )*
  {
    return (short)res;
  }
}

short unary(boolean sim) :
{
  short res;
}
{
  < NOT > res = simpleElement(sim)
  {
    return res == 0 ? (short)1 : (short)0;
  }
| < MINUS > res = simpleElement(sim)
  {
    return (short)-res;
  }
| res = simpleElement(sim)
  {
    return res;
  }
}

short simpleElement(boolean sim) :
{
  short res;
}
{
  res = id(sim)
  {
    return res;
  }
|  res = number()
  {
    return res;
  }
| res = muldiv(sim)
  {
    return res;
  }
| "(" res = expr(sim) ")"
  {
    return res;
  }
}

short muldiv(boolean sim):{  short res;
  short temp;
  short temp1;
}{  < MULDIV > "(" res = expr(sim) "," temp = expr(sim) "," temp1 = expr(sim) ")"
  {
  	if(sim)
  		return 0;
    return (short)(res * temp / temp1);
  }
}

short id(boolean sim) :
{
  Token t;
}
{
  t = < ID >
  {
  	if(sim) 
  		return 0;
    return getValue(Utils.win2utf(t.image));
  }
}

short number() :
{
  Token t;
}
{
  t = < NUMBER >
  {
    return Short.parseShort(t.image);
  }
}

