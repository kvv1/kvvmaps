/* Generated By:JavaCC: Do not edit this line. EG1.java */
package kvv.evlang;
import java.io.*;
import java.util.*;
import kvv.evlang.impl.*;
import kvv.controllers.register.*;

public abstract class EG1 extends EG implements EG1Constants {
  public EG1(String fileName) throws FileNotFoundException
  {
    this (new JavaCCReader(fileName));
  }

  public void parse() throws ParseException
  {
    file();
    buildInit();
    check();
    checkStack();
  }

  final public void file() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    case REG:
    case EXTREG:
    case EEREG:
    case TIMER:
    case ONSET:
    case ONCHANGE:
    case CONST:
    case CHECKBOX:
    case TEXT:
    case INT:
    case VOID:
      line();
      file();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void line() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      constant();
      break;
    case REG:
    case EXTREG:
    case EEREG:
      register();
      break;
    case CHECKBOX:
    case TEXT:
      uiDecl();
      break;
    case TIMER:
      timer();
      break;
    case ONSET:
      onset();
      break;
    case ONCHANGE:
      onchange();
      break;
    case INT:
    case VOID:
      proc();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void proc() throws ParseException {
  Token name;
  Code bytes = null;
  int retSize = 0;
  LocalListDef locals = new LocalListDef();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case INT:
      jj_consume_token(INT);
      retSize = 1;
      ;
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    name = jj_consume_token(ID);
    jj_consume_token(46);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      argListDef(locals);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(47);
    Code.procDecl(this, retSize, name.image, locals);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      bytes = stmtBlock();
      Code.procCode(this, bytes);
      break;
    case 48:
      jj_consume_token(48);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void argListDef(LocalListDef locals) throws ParseException {
  Token arg;
    jj_consume_token(INT);
    arg = jj_consume_token(ID);
    locals.add(arg.image);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
      jj_consume_token(49);
      jj_consume_token(INT);
      arg = jj_consume_token(ID);
      locals.add(arg.image);
    }
    locals.endOfArgs();
  }

  final public void localListDef() throws ParseException {
  Token arg;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(INT);
      arg = jj_consume_token(ID);
      jj_consume_token(48);
      currentFunc.locals.add(arg.image);
    }
  }

  final public void constant() throws ParseException {
  Token name;
  Token value;
    jj_consume_token(CONST);
    name = jj_consume_token(ID);
    jj_consume_token(50);
    value = jj_consume_token(NUMBER);
    jj_consume_token(48);
    checkName(name.image);
    constants.put(name.image, Short.parseShort(value.image));
  }

  final public void uiDecl() throws ParseException {
  Token name;
  Token text;
  RegType type;
    type = uitype();
    name = jj_consume_token(ID);
    text = jj_consume_token(STRING);
    jj_consume_token(48);
    setUI(name.image, text.image.replace("\u005c"", ""), type);
  }

  final public RegType uitype() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHECKBOX:
      t = jj_consume_token(CHECKBOX);
    {if (true) return RegType.checkbox;}
      break;
    case TEXT:
      t = jj_consume_token(TEXT);
    {if (true) return RegType.textRW;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void register() throws ParseException {
  Token regName;
  Token regNum = null;
  Token extRegName = null;
  Token initVal = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTREG:
      jj_consume_token(EXTREG);
      extRegName = jj_consume_token(ID);
      jj_consume_token(48);
    newExtRegister(extRegName.image);
      break;
    case REG:
      jj_consume_token(REG);
      regName = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        jj_consume_token(46);
        regNum = jj_consume_token(ID);
        jj_consume_token(47);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(48);
    if (regNum == null) newRegister(regName.image);
    else newRegister(regName.image, regNum.image);
      break;
    case EEREG:
      jj_consume_token(EEREG);
      regName = jj_consume_token(ID);
      jj_consume_token(50);
      initVal = jj_consume_token(NUMBER);
      jj_consume_token(48);
    newEERegister(regName.image, Short.parseShort(initVal.image));
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void timer() throws ParseException {
  Token name;
  Code bytes;
    currentFunc = new Func(this, "", new LocalListDef(), 0);
    jj_consume_token(TIMER);
    name = jj_consume_token(ID);
    bytes = stmtBlock();
    Code.timer(this, name.image, bytes);
  }

  final public void onset() throws ParseException {
  Expr cond;
  Code bytes;
    currentFunc = new Func(this, "", new LocalListDef(), 0);
    jj_consume_token(ONSET);
    jj_consume_token(46);
    cond = expr();
    jj_consume_token(47);
    bytes = stmtBlock();
    Code.onset(this, cond.getCode(), bytes);
  }

  final public void onchange() throws ParseException {
  Expr cond;
  Code bytes;
    currentFunc = new Func(this, "", new LocalListDef(), 0);
    jj_consume_token(ONCHANGE);
    jj_consume_token(46);
    cond = expr();
    jj_consume_token(47);
    bytes = stmtBlock();
    Code.onchange(this, cond.getCode(), bytes);
  }

  final public Code stmtBlock() throws ParseException {
  Code bytes = new Code();
  Code temp;
  int localpos = currentFunc.locals.getSize();
    jj_consume_token(51);
    localListDef();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case PRINT:
      case RETURN:
      case ID:
      case 51:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      temp = stmt();
      bytes.addAll(temp);
    }
    jj_consume_token(52);
    currentFunc.locals.setSize(localpos);
    {if (true) return bytes;}
    throw new Error("Missing return statement in function");
  }

  final public Code stmt() throws ParseException {
  Code res;
  Token name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINT:
    case RETURN:
    case ID:
      res = assign();
    {if (true) return res;}
      break;
    case IF:
      res = ifStmt();
    {if (true) return res;}
      break;
    case 51:
      res = stmtBlock();
    {if (true) return res;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Code ifStmt() throws ParseException {
  Expr res;
  Code stmt;
  Code stmt2 = null;
    jj_consume_token(IF);
    jj_consume_token(46);
    res = expr();
    jj_consume_token(47);
    stmt = stmt();
    if (jj_2_1(2)) {
      jj_consume_token(ELSE);
      stmt2 = stmt();
    } else {
      ;
    }
    {if (true) return Code.ifstmt(res, stmt, stmt2);}
    throw new Error("Missing return statement in function");
  }

  final public Code assign() throws ParseException {
  Expr res = null;
  Token name;
  List < Expr > argList = new ArrayList < Expr > ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINT:
      jj_consume_token(PRINT);
      res = expr();
      jj_consume_token(48);
    {if (true) return Code.print(res);}
      break;
    case RETURN:
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case MINUS:
      case MULDIV:
      case ID:
      case NUMBER:
      case 46:
        res = expr();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(48);
    {if (true) return Code.ret(this, res);}
      break;
    case ID:
      name = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
        res = expr();
        jj_consume_token(48);
      {if (true) return Code.assign(this, name.image, res);}
        break;
      case 53:
        jj_consume_token(53);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_S:
          jj_consume_token(START_S);
          res = expr();
          jj_consume_token(48);
        {if (true) return Code.start_s(this, name.image, res);}
          break;
        case START_MS:
          jj_consume_token(START_MS);
          res = expr();
          jj_consume_token(48);
        {if (true) return Code.start_ms(this, name.image, res);}
          break;
        case STOP:
          jj_consume_token(STOP);
          jj_consume_token(48);
        {if (true) return Code.stop(this, name.image);}
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case DEC:
        jj_consume_token(DEC);
        jj_consume_token(48);
      {if (true) return Code.dec(this, name.image);}
        break;
      case INC:
        jj_consume_token(INC);
        jj_consume_token(48);
      {if (true) return Code.inc(this, name.image);}
        break;
      case 46:
        jj_consume_token(46);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
        case MINUS:
        case MULDIV:
        case ID:
        case NUMBER:
        case 46:
          argList = argList();
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(47);
        jj_consume_token(48);
      {if (true) return Code.callp(this, name.image, argList);}
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expr expr() throws ParseException {
  Expr res;
  Expr temp;
    res = logAndExpr();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_4;
      }
      jj_consume_token(OR);
      temp = logAndExpr();
      res = Expr.or(res, temp);
    }
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Expr logAndExpr() throws ParseException {
  Expr res;
  Expr temp;
    res = boolExpr();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      temp = boolExpr();
      res = Expr.and(res, temp);
    }
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Expr boolExpr() throws ParseException {
  Expr res;
  Expr temp;
    res = intExpr();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NEQ:
      case LT:
      case LE:
      case GT:
      case GE:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        temp = intExpr();
        res = Expr.eq(res, temp);
        break;
      case NEQ:
        jj_consume_token(NEQ);
        temp = intExpr();
        res = Expr.neq(res, temp);
        break;
      case LT:
        jj_consume_token(LT);
        temp = intExpr();
        res = Expr.lt(res, temp);
        break;
      case LE:
        jj_consume_token(LE);
        temp = intExpr();
        res = Expr.le(res, temp);
        break;
      case GT:
        jj_consume_token(GT);
        temp = intExpr();
        res = Expr.gt(res, temp);
        break;
      case GE:
        jj_consume_token(GE);
        temp = intExpr();
        res = Expr.ge(res, temp);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Expr intExpr() throws ParseException {
  Expr res;
  Expr temp;
    res = term();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        temp = term();
        res = Expr.add(res, temp);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        temp = term();
        res = Expr.sub(res, temp);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Expr term() throws ParseException {
  Expr res;
  Expr temp;
    res = unary();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        temp = unary();
        res = Expr.mul(res, temp);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        temp = unary();
        res = Expr.div(res, temp);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Expr unary() throws ParseException {
  Expr res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      res = element();
    {if (true) return Expr.not(res);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      res = element();
    {if (true) return Expr.negate(res);}
      break;
    case MULDIV:
    case ID:
    case NUMBER:
    case 46:
      res = element();
    {if (true) return res;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List < Expr > argList() throws ParseException {
  List < Expr > res = new ArrayList < Expr > ();
  Expr arg;
    arg = expr();
    res.add(arg);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_9;
      }
      jj_consume_token(49);
      arg = expr();
      res.add(arg);
    }
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Expr element() throws ParseException {
  Token t;
  List < Expr > argList = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
    {if (true) return new Expr(Short.parseShort(t.image));}
      break;
    case ID:
      t = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        jj_consume_token(46);
      argList = new ArrayList < Expr > ();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
        case MINUS:
        case MULDIV:
        case ID:
        case NUMBER:
        case 46:
          argList = argList();
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        jj_consume_token(47);
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    if (argList != null)
    {
      {if (true) return new Expr(this, t.image, argList);}
    }
    else
    {
      {if (true) return new Expr(this, t.image);}
    }
      break;
    case MULDIV:
    Expr res;
    Expr temp;
    Expr temp1;
      jj_consume_token(MULDIV);
      jj_consume_token(46);
      res = expr();
      jj_consume_token(49);
      temp = expr();
      jj_consume_token(49);
      temp1 = expr();
      jj_consume_token(47);
    {if (true) return Expr.muldiv(res, temp, temp1);}
      break;
    case 46:
      jj_consume_token(46);
      res = expr();
      jj_consume_token(47);
    {if (true) return res;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_14()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public EG1TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfe00001,0xfe00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe00000,0x10000000,0x10000000,0x28000,0xc0000000,0x28000,0x0,0x0,0x100,0x80,0x7e00,0x7e00,0x30000,0x30000,0xc0000,0xc0000,0x28000,0x0,0x28000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1e0,0x1e0,0x180,0x80,0x90000,0x20000,0x80,0x60,0x4000,0x0,0x80602,0x80602,0x5410,0x1,0x5410,0x24400c,0x602,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5410,0x20000,0x5410,0x4000,0x5410,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public EG1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EG1(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public EG1(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public EG1(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
